blueprint:
  name: "JPG to PNG Converter with Path Management"
  description: >
    Converts JPG images to PNG with configurable input/output directories, 
    resolution options, and compression settings. 
    First use will automatically install required dependencies.
  domain: automation
  source_url: "https://github.com/youkorr/jpg-to-png-converter"
  version: "1.1.0"
  requirements:
    - python_script
    - shell_command
  input:
    input_directory:
      name: "Input Directory"
      description: "Directory where JPG files are located (e.g., /config/www/camera)"
      selector:
        text:
          multiline: false
      default: "/config/www/jpg_input"
    output_directory:
      name: "Output Directory"
      description: "Directory where PNG files will be saved (e.g., /config/www/converted)"
      selector:
        text:
          multiline: false
      default: "/config/www/png_output"
    resolution_preset:
      name: "Resolution Preset"
      description: "Select a predefined resolution or custom"
      selector:
        select:
          options:
            - "original"
            - "1920x1080"
            - "1280x720"
            - "800x600"
            - "320x240"
            - "custom"
    custom_resolution:
      name: "Custom Resolution"
      description: "Custom resolution if preset is 'custom' (e.g., 640x480)"
      default: "640x480"
      selector:
        text:
          pattern: "^[0-9]+x[0-9]+$"
    compression_level:
      name: "Compression Level"
      description: "PNG compression level (0-9, 0=none, 9=max)"
      default: 6
      selector:
        number:
          min: 0
          max: 9
          step: 1
    create_directories:
      name: "Create directories if missing"
      description: "Automatically create input and output directories if they don't exist"
      default: true
      selector:
        boolean: {}

mode: single

trigger:
  - platform: state
    entity_id: input_button.trigger_conversion

variables:
  converter_script: |
    from PIL import Image
    import sys
    import os
    import logging
    from pathlib import Path

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        filename='/config/jpg_to_png_converter.log'
    )
    logger = logging.getLogger(__name__)

    def ensure_directories(input_dir, output_dir):
        """Crée les répertoires s'ils n'existent pas."""
        Path(input_dir).mkdir(parents=True, exist_ok=True)
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        logger.info(f"Directories checked/created: {input_dir}, {output_dir}")

    def get_resolution(preset, custom=None):
        """Détermine la résolution à utiliser."""
        presets = {
            "original": None,
            "1920x1080": (1920, 1080),
            "1280x720": (1280, 720),
            "800x600": (800, 600),
            "320x240": (320, 240)
        }
        if preset == "custom" and custom:
            try:
                width, height = map(int, custom.split('x'))
                return (width, height)
            except ValueError:
                logger.error(f"Invalid custom resolution format: {custom}")
                return None
        return presets.get(preset)

    def convert_jpg_to_png(jpg_path, png_path, resolution=None, compression=6):
        """Convertit un fichier JPG en PNG avec options."""
        try:
            img = Image.open(jpg_path)
            
            # Conversion en RGB si nécessaire
            if img.mode in ('RGBA', 'LA'):
                background = Image.new('RGB', img.size, (255, 255, 255))
                background.paste(img, mask=img.split()[-1])
                img = background

            # Redimensionnement si nécessaire
            if resolution and resolution != "original":
                img = img.resize(resolution, Image.Resampling.LANCZOS)
                logger.info(f"Resized image to {resolution}")

            # Sauvegarde avec compression
            img.save(
                png_path, 
                "PNG", 
                optimize=True,
                compress_level=compression
            )
            logger.info(f"Successfully converted {jpg_path} to {png_path}")
            return True
        except Exception as e:
            logger.error(f"Error converting image: {str(e)}")
            return False

    def process_directory(input_dir, output_dir, resolution, compression):
        """Traite tous les fichiers JPG dans le répertoire."""
        input_path = Path(input_dir)
        output_path = Path(output_dir)
        
        if not input_path.exists():
            logger.error(f"Input directory does not exist: {input_dir}")
            return False
            
        jpg_files = list(input_path.glob("*.jpg")) + list(input_path.glob("*.jpeg"))
        converted = 0
        
        for jpg_file in jpg_files:
            png_file = output_path / f"{jpg_file.stem}.png"
            if convert_jpg_to_png(str(jpg_file), str(png_file), resolution, compression):
                converted += 1
                
        logger.info(f"Converted {converted} of {len(jpg_files)} files")
        return converted > 0

    if __name__ == "__main__":
        input_dir = sys.argv[1]
        output_dir = sys.argv[2]
        resolution_preset = sys.argv[3]
        custom_resolution = sys.argv[4] if len(sys.argv) > 4 else None
        compression = int(sys.argv[5]) if len(sys.argv) > 5 else 6
        create_dirs = sys.argv[6].lower() == "true" if len(sys.argv) > 6 else False

        if create_dirs:
            ensure_directories(input_dir, output_dir)

        resolution = get_resolution(resolution_preset, custom_resolution)
        success = process_directory(input_dir, output_dir, resolution, compression)
        
        if not success:
            sys.exit(1)

action:
  # Étape 1: Vérification des dossiers
  - service: python_script.execute
    data:
      code: |
        import os
        from pathlib import Path
        
        input_dir = "{{ input_directory }}"
        output_dir = "{{ output_directory }}"
        create_dirs = {{ create_directories }}
        
        if create_dirs:
            Path(input_dir).mkdir(parents=True, exist_ok=True)
            Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        if not os.path.exists(input_dir):
            raise Exception(f"Input directory does not exist: {input_dir}")
  
  # Étape 2: Conversion des images
  - service: shell_command.convert
    data:
      command: >
        python3 /config/scripts/convert_jpg_to_png.py 
        '{{ input_directory }}' 
        '{{ output_directory }}' 
        '{{ resolution_preset }}' 
        '{{ custom_resolution if resolution_preset == "custom" else "" }}' 
        '{{ compression_level }}' 
        '{{ create_directories }}'
  
  # Étape 3: Notification de succès
  - service: persistent_notification.create
    data:
      title: "Image Conversion Complete"
      message: >
        Successfully processed images:
        Input Directory: {{ input_directory }}
        Output Directory: {{ output_directory }}
        Resolution: {{ resolution_preset }}{{ " - " + custom_resolution if resolution_preset == "custom" }}
        Compression Level: {{ compression_level }}

error_action:
  - service: persistent_notification.create
    data:
      title: "Conversion Error"
      message: "Error during conversion: {{ trigger.error }}"
      notification_id: "jpg_png_converter_error"

